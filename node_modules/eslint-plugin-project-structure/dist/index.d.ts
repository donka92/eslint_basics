declare module "errors/FinalError/FinalError" {
    export class FinalError extends Error {
        message: string;
        type: string;
        constructor(message: string);
    }
}
declare module "errors/FinalError/helpers/finalErrorGuard" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const finalErrorGuard: (err: unknown) => err is FinalError;
}
declare module "validators/validateFileStructure/helpers/getInvalidConfigFileError" {
    export const getInvalidConfigFileError: (configPath: string) => Error;
}
declare module "validators/validateFileStructure/helpers/getInvalidStructureError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidStructureError: () => FinalError;
}
declare module "validators/validateFileStructure/helpers/getInvalidIgnorePatternsError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidIgnorePatternsError: (ignorePatterns: unknown) => FinalError;
}
declare module "validators/validateFileStructure/helpers/isIgnoredPathname" {
    export const isIgnoredPathname: (pathname: string, ignorePatterns?: string[]) => boolean;
}
declare module "types" {
    export type Extension = string | string[];
    export type NodeType = "File" | "Folder";
    interface BaseRule {
        ruleId?: string;
        name?: string;
        children?: Rule[];
        extension?: Extension;
    }
    interface NameRule extends BaseRule {
        name: string;
    }
    interface FolderRule extends BaseRule {
        extension?: never;
        children: Rule[];
    }
    interface FileRule extends BaseRule {
        children?: never;
        extension: Extension;
    }
    interface RuleIdAlone {
        ruleId: string;
        name?: never;
        children?: never;
        extension?: never;
    }
    interface RuleIdName extends NameRule {
        ruleId: string;
    }
    interface RuleIdFile extends FileRule {
        ruleId: string;
    }
    interface RuleIdFolder extends FolderRule {
        ruleId: string;
    }
    export type RuleId = RuleIdAlone | RuleIdFolder | RuleIdFile | RuleIdName;
    export type Rule = FolderRule | FileRule | NameRule | RuleId;
    export type RegexParameters = Record<string, string>;
    export interface ProjectStructureConfig {
        ignorePatterns?: string[];
        structure: Rule;
        rules?: Record<string, Rule>;
        regexParameters?: RegexParameters;
    }
}
declare module "validators/validateFileStructure/helpers/readConfigFile" {
    import { ProjectStructureConfig } from "types";
    export const readConfigFile: (configPath: string) => ProjectStructureConfig | undefined;
}
declare module "validators/validatePath/helpers/getInvalidRuleError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidRuleError: (rule: unknown) => FinalError;
}
declare module "validators/validatePath/helpers/getInvalidTypeError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidTypeError: (rule: unknown) => FinalError;
}
declare module "validators/validatePath/helpers/getFileNameWithoutExtension" {
    export const getFileNameWithoutExtension: (fileName: string) => string;
}
declare module "helpers/isFileFromPathname" {
    export const isFileFromPathname: (pathname: string) => boolean;
}
declare module "validators/validatePath/helpers/getNodeName" {
    interface GetNodeNameReturn {
        nodeName: string;
        fileNameWithExtension: string | undefined;
    }
    export const getNodeName: (pathname: string) => GetNodeNameReturn;
}
declare module "helpers/getNodeRule/helpers/isIdRule" {
    import { RuleId, Rule } from "types";
    export const isIdRule: (rule: Rule) => rule is RuleId;
}
declare module "helpers/getIdRule/helpers/getIdRuleError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getIdRuleError: (ruleId: string) => FinalError;
}
declare module "helpers/getIdRule/helpers/getInvalidRuleIdError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidRuleIdError: (ruleId: unknown) => FinalError;
}
declare module "helpers/getIdRule/helpers/getInvalidRulesError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidRulesError: () => FinalError;
}
declare module "helpers/getIdRule/getIdRule" {
    import { ProjectStructureConfig, Rule, RuleId } from "types";
    export const getIdRule: (rule: RuleId, { rules }: ProjectStructureConfig) => Rule | void;
}
declare module "helpers/getNodeRule/getNodeRule" {
    import { Rule, ProjectStructureConfig } from "types";
    export const getNodeRule: (rule: Rule, config: ProjectStructureConfig) => Rule;
}
declare module "validators/validateChildren/helpers/convertChildrenRuleIdToRule" {
    import { ProjectStructureConfig, Rule } from "types";
    export const convertChildrenRuleIdToRule: (children: Rule[], config: ProjectStructureConfig) => Rule[];
}
declare module "validators/validateChildren/helpers/filterRulesByType" {
    import { ProjectStructureConfig, Rule } from "types";
    export interface FilterRulesByType {
        pathname: string;
        rule: Rule;
        config: ProjectStructureConfig;
    }
    export const filterRulesByType: ({ pathname, rule, config, }: FilterRulesByType) => boolean;
}
declare module "validators/validateChildren/helpers/getInvalidChildrenError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidChildrenError: (children: unknown) => FinalError;
}
declare module "validators/validateChildren/helpers/getNextPath" {
    export const getNextPathname: (pathname: string, nodeName: string) => string;
}
declare module "validators/validateChildren/helpers/sortChildrenByNameType" {
    import { Rule } from "types";
    export const sortChildrenByNameType: (children: Rule[]) => Rule[];
}
declare module "errors/RuleError/RuleError" {
    export class RuleError extends Error {
        message: string;
        ruleMessage: string;
        constructor(message: string, ruleMessage: string);
    }
}
declare module "errors/RuleError/helpers/ruleErrorGuard" {
    import { RuleError } from "errors/RuleError/RuleError";
    export const ruleErrorGuard: (err: unknown) => err is RuleError;
}
declare module "helpers/isFileFromNodeName" {
    export const isFileFromNodeName: (nodeName: string) => boolean;
}
declare module "helpers/getNodeType" {
    import { NodeType } from "types";
    export const getNodeType: (nodeName: string) => NodeType;
}
declare module "validators/validateChildren/helpers/validateRulesList" {
    import { Rule, ProjectStructureConfig } from "types";
    interface ValidateRulesList {
        pathname: string;
        parentName: string;
        nodesList: Rule[];
        config: ProjectStructureConfig;
    }
    export const validateRulesList: ({ pathname, parentName, nodesList, config, }: ValidateRulesList) => void;
}
declare module "validators/validateChildren/validateChildren" {
    import { ProjectStructureConfig, Rule } from "types";
    interface ValidateChildren {
        pathname: string;
        nodeName: string;
        children: Rule[];
        config: ProjectStructureConfig;
    }
    export const validateChildren: ({ pathname, nodeName, children, config, }: ValidateChildren) => void;
}
declare module "validators/validateExtension/helpers/getExtensionError" {
    import { RuleError } from "errors/RuleError/RuleError";
    import { Extension } from "types";
    export const getExtensionError: (fileName: string, extension: Extension) => RuleError;
}
declare module "validators/validateExtension/helpers/getInvalidExtensionError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidExtensionError: (extension: unknown) => FinalError;
}
declare module "validators/validateExtension/validateExtension.consts" {
    export const ALL_EXTENSIONS = "*";
}
declare module "validators/validateExtension/validateExtension" {
    import { Extension } from "types";
    export const validateExtension: (fileName: string, extension: Extension) => void;
}
declare module "validators/validateName/helpers/getInvalidNameError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidNameError: (name: unknown) => FinalError;
}
declare module "validators/validateName/helpers/getInvalidRegexError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidRegexError: (regex: string) => FinalError;
}
declare module "validators/validateName/helpers/getNameError" {
    import { RuleError } from "errors/RuleError/RuleError";
    export const getNameError: (nodeName: string, ruleName: string) => RuleError;
}
declare module "validators/validateName/helpers/isRegex" {
    export const isRegex: (regex: string) => boolean;
}
declare module "validators/validateName/helpers/isRegexInvalid" {
    export const isRegexInvalid: (regex: string) => boolean;
}
declare module "validators/validateName/helpers/validateRegexPattern/helpers/getLowerCaseFirstLetter" {
    export const getLowerCaseFirstLetter: (text: string) => string;
}
declare module "validators/validateName/helpers/validateRegexPattern/helpers/getUpperCaseFirstLetter" {
    export const getUpperCaseFirstLetter: (text: string) => string;
}
declare module "validators/validateName/helpers/validateRegexPattern/validateRegexPattern.consts" {
    export const SNAKE_CASE: string;
    export const KEBAB_CASE: string;
    export const PASCAL_CASE: string;
    export const CAMEL_CASE: string;
}
declare module "validators/validateName/helpers/validateRegexPattern/helpers/getDefaultRegexParameters" {
    import { RegexParameters } from "types";
    export const getDefaultRegexParameters: (parentName: string, regexParameters?: RegexParameters) => Record<string, string>;
}
declare module "validators/validateName/helpers/validateRegexPattern/helpers/getInvalidRegexParametersError" {
    import { FinalError } from "errors/FinalError/FinalError";
    export const getInvalidRegexParametersError: () => FinalError;
}
declare module "validators/validateName/helpers/validateRegexPattern/helpers/applyRegexParameters" {
    import { RegexParameters } from "types";
    interface ApplyRegexParameters {
        regex: string;
        parentName: string;
        regexParameters?: RegexParameters;
    }
    export const applyRegexParameters: ({ regex, parentName, regexParameters, }: ApplyRegexParameters) => string;
}
declare module "validators/validateName/helpers/validateRegexPattern/helpers/getNameRegexError" {
    import { RuleError } from "errors/RuleError/RuleError";
    export const getNameRegexError: (nodeName: string, regex: string) => RuleError;
}
declare module "validators/validateName/helpers/validateRegexPattern/validateRegexPattern" {
    import { RegexParameters } from "types";
    export interface ValidateRegexPattern {
        nodeName: string;
        parentName: string;
        regex: string;
        regexParameters?: RegexParameters;
    }
    export const validateRegexPattern: ({ nodeName, parentName, regex, regexParameters, }: ValidateRegexPattern) => void;
}
declare module "validators/validateName/validateName" {
    import { RegexParameters } from "types";
    interface ValidateName {
        nodeName: string;
        ruleName: string;
        parentName: string;
        regexParameters?: RegexParameters;
    }
    export const validateName: ({ nodeName, ruleName, parentName, regexParameters, }: ValidateName) => void;
}
declare module "validators/validatePath/validatePath" {
    import { Rule, ProjectStructureConfig } from "types";
    interface ValidatePath {
        pathname: string;
        parentName: string;
        rule: Rule;
        config: ProjectStructureConfig;
    }
    export const validatePath: ({ pathname, parentName, rule, config, }: ValidatePath) => void;
}
declare module "validators/validateFileStructure/validateFileStructure" {
    export const validateFileStructure: (configPath: string, pathname?: string) => void;
}
declare module "rules/fileStructure" {
    export const fileStructure: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"error", never[], {
        Program(node: import("@typescript-eslint/types/dist/generated/ast-spec").Program): void;
    }>;
}
declare module "index" {
    export const rules: {
        "file-structure": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"error", never[], {
            Program(node: import("@typescript-eslint/types/dist/generated/ast-spec").Program): void;
        }>;
    };
}
